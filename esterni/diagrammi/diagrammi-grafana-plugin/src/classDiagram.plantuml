@startuml GrafanaClasses

class ConfigRL{
    + render() : JSX.Element
    - queryNames()
    - queryAssociation()
    - showQueryAssociation(ChangeEvent<HTMLSelectElement>)
}

class ConfigSVM{
    + toDo()
}



class Config{
    + toDo()
}

interface Strategy{
    + Predict(GrafanaData, Predictor, any): number[][]
}




class PredictionRL implements Strategy{
    + const coefficients: number[]
    + const base: number
    + data.inputGrafanaValues: number[][]
    + predict(GrafanaData, Predictor, parameter): number [][]
    + const f (number): number
    + data.inputGrafanaValues.forEach(): number[][]
}

class PredictionSVM{
    + predict(GrafanaData, Predictor, parameter): number[][]
    + coefficients:number[]
    + base: number
    + f(number): number
    + data.outputValues: number[][]
    + data.inputGrafanaValues.forEach(): number[][]
}


class Model{
    - data: GrafanaData
    - predictor: Predictor 
    - strategy: Strategy
    + setData(GrafanaData): GrafanaData
    + setPredictor(Predictor): void
    + predict(): number

}

class GrafanaData{
    + inputGrafanaValues: number[][]
    + outputValues: number[][]
    + {static} readValues(DataFrame[]): GrafanaData
    + const time: any
    + const values: number[][]
    + const temp: any[]
    + const data: GrafanaData

}

class Predictor{
    + type: string
    + tuples: number
    + coefficients: number[]
    + svmW: number[]
    + opt: any
    + {static} readJson(any): Predictor
}

interface Options{
    + threshold: number
    + thresholdColor: any
}

class EditorView{
    + getUploadFile(any): void
    + render(): any
}


interface Props{
    + type:string
    + coefficients: any[]
    + opt: any
    + lv: number
    + time: Date

}
class MainView{
    + render(): any
    + const getStyle: any
}

class PanelCtrl{
    - model: Model
    - lv: number
    - time: Date
    + constructor(PanelProps)
    - setData(): void
    - setPredictor(): void
    - predict(): void
    - update(): void
    - render(): any

}


@enduml